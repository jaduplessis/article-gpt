{
    "0": "<h2>Creating a simple Slack app to learn ALEIOS\u200b</h2><p>Now that we have a basic knowledge of what ALEIOS does, let's see how it can be set up and used in the console. We'll walk through creating a Slack app that responds to events in a Slack channel.</p><p>As mentioned in the intro, I like to think of an event bus and associated lambdas as the \"nervous system and muscles\" for your application. The event bus enables your application to quickly detect that something has happened and to quickly react to that event.</p><p>For our example, we'll create two example events that will form the basis of our application. First, we'll respond to messages in a channel with a translated response. Second, we'll create a homepage for our app that will be rendered when you hit the root URL.</p><p>In order to serve / and /events in an efficient manner, we'll need to set up an efficient routing system that will get a Slack request to our event bus and then to our lambda. Let's set up a solution that is both strong and agile to handle these requests.</p>",
    "1": "In this post, we'll walk through setting up a Slack app on the console. We'll set up our event bus and our lambdas, which act as the nervous system and muscles when it comes to detecting and enacting actions for an efficient response. We'll establish two example events as the foundation for future operations: responding to a message in a channel with a translated response and rendering a very basic homepage. This will require us to develop an efficient routing system to efficiently channel Slack requests through the event bus to the appropriate lambdas. This will ensure a strong and agile solution to handle our Slack requests going forward.",
    "2": "In this post, we'll walk through using the ALEIOS console to create a Slack app and discuss how an event bus and lambdas can act as the nervous system and muscles for detecting and acting on these actions efficiently. We'll add two example events to our app to build the foundation for future operation: responding to messages in a channel with an accompanying translated response, and rendering a basic homepage for our app. Finally, we'll render an efficient routing system to ensure that Slack requests are routed through the event bus to a lambda to respond, creating a strong and agile solution that can handle the vast majority of requests that come through your Slack app.",
    "3": "Think of your app as a body. The event bus and lambdas act as the nervous system and muscles, respectively. The event bus is what detects an action occurred and the lambdas are what act to do something in response. In between, you want to have a solid infrastructure to do this efficiently. That's what we're going to build today. First, we'll establish two example events that will act as our framework for how to handle future operations. We'll set up responding to channel messages with a translated response as well as rendering a basic homepage. Then, we'll build a routing system that is efficient and easy to update for future Slack operations. By the end, you'll have a way to handle Slack requests that is strong and agile.",
    "4": "<h2>Creating the app in the console\u200b</h2><p>Alright, let's see how this works in the console. First, let's look at the basic setup of our app. Remember, we're going to use the event bus and lambdas to act as the nervous system and muscles of our app to detect and act on incoming actions efficiently.</p><p>For now, let's set up two example events to act as the foundation for the rest of our operation.</p><p>First, I want to respond to any message in my channel (in English) with a translated response.</p><p>Second, I want to create a basic homepage for my app that will show me the weather in the user's location.</p><p>Let's build our app, which will look something like this:</p><div><p>Slack will send requests to our app to two different routes:</p><p>POST / will respond to Slack events</p><p>GET / will respond to the Slack OAuth flow</p><p>Both of these routes will be managed by our event bus, which will determine which lambda to send our event to.</p></div><p>Then, we'll handle each of these POST routes with a lambda that will, in turn, trigger child lambdas to handle specific events. This will let us have a strong but agile solution that can handle a variety of different requests.</p>"
}