{
    "0": "In this guide, we'll create a Slack app in the console and then forward events on to a CDK-deployed serverless backend. We'll use an Event Bridge as a sort of nervous system to forward events to lambdas that will actually carry out the actions. To do this, we'll explore two example events: a message event and a reaction event. With the message event, we'll set up our app to respond to messages in a channel with a translated response. With the reaction event, we'll setup a basic homepage for our app. These examples will provide a framework for a host of other applications.",
    "1": "<h2>Using your app - a walkthrough\u200b</h2><p>Ok, now let's walk through actually creating a Slack app in the console and then using it to forward events to our CDK deployed serverless backend.</p><p>If you want, you can think of the event bus as a sort of nervous system. Events come in, and the system reacts by sending those events to the right lambda to carry out the right action.</p><p>We'll look at two example events:</p><p>First, we'll look at a message event. We'll respond to messages in a channel with a translated response. This is in the message.ts file at the top of the directory.</p><p>Next, we'll look at a reaction event. We'll be rendering a very basic homepage when you hit the root url of the system. This is in the homepage.ts file at the top of the directory.</p><p>These are pretty basic, but I hope they give you a framework for a host of other applications.</p>",
    "2": "<h2>Building the app\u200b</h2><p>Let's walk through how we'd build our Slack app using the Serverless Application Platform.</p><p>Our Slack app needs to do a few things:</p><p>We can create a Slack app in the AWS Console and set up an API Gateway to forward our events on to our CDK-deployed serverless backend.</p><p>Once we have all this set up, we can use an EventBridge event bus as a sort of distributed nervous system to forward our events on to lambdas that do things.</p><p>I'm going to walk you through two events you might care about, and how you could process them:</p><p>I'm not going to cover everything you can do with Slack events, but I think these two give you some frameworks for a host of other applications.</p>",
    "3": "<h2>Let's build a Slack app to forward events to a CDK-deployed serverless backend using the EventBridge console\u200b</h2><p>Alright, enough talk. Let's walk through it. We're going to build a Slack app that forwards events to a CDK-deployed serverless backend. We're going to use an event bus as a sort of nervous system that can forward events to lambdas that do stuff.</p><p>I'm going to show you two types of events: a message event and a reaction event. The message event will be used to respond to message in a channel with a translated response. The reaction event will be used to render a basic homepage for our Slack app.</p><p>These aren't the only events you can respond to. They are just the ones I picked as examples. You can use these frameworks for a host of other applications.</p>",
    "4": "In this post, we're going to walk through creating a Slack app in the console. We'll then see how we can take this a step further and have this slack app forward events to our CDK deployed serverless backend. We'll see how we can use an event bus as a sort of nervous system to forward events to lambdas that can carry out actions. We'll look at two example events: first a message event, where we'll respond to messages sent to a channel with translated responses, and second a reaction event, where we'll render a basic homepage. These are just two examples, but you could build a host of other applications using the same frameworks."
}